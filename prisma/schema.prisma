// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management for the CRM system
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        Role     @default(AGENT)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Call center operations
  calls        Call[]
  tickets      Ticket[]
  activities   Activity[]

  @@map("users")
}

enum Role {
  ADMIN       // System administrator
  MANAGER     // Call center manager
  SUPERVISOR  // Team supervisor
  AGENT       // Call center agent
  READONLY    // Read-only access
}

// Dental practices (clients)
model Practice {
  id            String   @id @default(cuid())
  name          String
  address       String?
  city          String?
  state         String?
  zipCode       String?
  phone         String?
  email         String?
  website       String?
  taxId         String?

  // Practice details
  practiceType  String?  // General, Orthodontics, Oral Surgery, etc.
  numberOfChairs Int?
  averagePatients Int?

  // Service agreement
  serviceLevel   ServiceLevel @default(BASIC)
  contractStart  DateTime?
  contractEnd    DateTime?
  monthlyFee     Decimal?
  isActive       Boolean  @default(true)

  // Relationships
  contacts       Contact[]
  calls          Call[]
  tickets        Ticket[]
  billing        Billing[]
  insuranceClaims InsuranceClaim[]
  activities     Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("practices")
}

enum ServiceLevel {
  BASIC     // Basic call answering
  STANDARD  // Call answering + scheduling
  PREMIUM   // Full administrative support
  ENTERPRISE // Complete RCM + support
}

// Practice contacts (dentists, office managers, etc.)
model Contact {
  id         String   @id @default(cuid())
  practiceId String
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  firstName  String
  lastName   String
  title      String?  // Dr., Office Manager, Receptionist, etc.
  email      String?
  phone      String?
  mobile     String?
  isPrimary  Boolean  @default(false)
  isActive   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

// Call logging and tracking
model Call {
  id         String   @id @default(cuid())
  practiceId String
  practice   Practice @relation(fields: [practiceId], references: [id])
  agentId    String
  agent      User     @relation(fields: [agentId], references: [id])

  // Call details
  callType   CallType
  direction  CallDirection
  phone      String?
  duration   Int?     // Duration in seconds
  notes      String?
  disposition CallDisposition?

  // Patient information (if applicable)
  patientName String?
  patientPhone String?
  appointmentDate DateTime?

  // Call outcome
  isResolved Boolean @default(false)
  followUpRequired Boolean @default(false)
  followUpDate DateTime?

  callStartTime DateTime @default(now())
  callEndTime   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("calls")
}

enum CallType {
  APPOINTMENT_SCHEDULING
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_CANCELLATION
  PATIENT_INQUIRY
  BILLING_INQUIRY
  INSURANCE_VERIFICATION
  EMERGENCY
  GENERAL_SUPPORT
  FOLLOW_UP
  OTHER
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum CallDisposition {
  COMPLETED
  NO_ANSWER
  BUSY
  VOICEMAIL
  CALLBACK_REQUESTED
  TRANSFERRED
  DISCONNECTED
}

// Support ticket system
model Ticket {
  id         String   @id @default(cuid())
  practiceId String
  practice   Practice @relation(fields: [practiceId], references: [id])
  assignedToId String?
  assignedTo User?    @relation(fields: [assignedToId], references: [id])

  // Ticket details
  subject    String
  description String
  priority   Priority @default(MEDIUM)
  status     TicketStatus @default(OPEN)
  category   TicketCategory

  // Patient information (if applicable)
  patientName String?
  patientPhone String?
  patientEmail String?

  // Resolution
  resolution String?
  resolvedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tickets")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketCategory {
  APPOINTMENT_ISSUE
  BILLING_QUESTION
  INSURANCE_CLAIM
  PATIENT_COMPLAINT
  TECHNICAL_SUPPORT
  GENERAL_INQUIRY
  EMERGENCY
}

// Billing and revenue cycle management
model Billing {
  id         String   @id @default(cuid())
  practiceId String
  practice   Practice @relation(fields: [practiceId], references: [id])

  // Billing period
  billingMonth Int
  billingYear  Int

  // Amounts
  totalCharges    Decimal
  totalPayments   Decimal
  totalAdjustments Decimal
  netRevenue      Decimal
  outstandingBalance Decimal

  // Collections metrics
  collectionRate    Decimal?
  daysInAR         Int?     // Days in Accounts Receivable
  agingOver90Days  Decimal?

  // Status
  status        BillingStatus @default(PENDING)
  processedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([practiceId, billingMonth, billingYear])
  @@map("billing")
}

enum BillingStatus {
  PENDING
  PROCESSED
  PAID
  DISPUTED
  WRITTEN_OFF
}

// Insurance claims management
model InsuranceClaim {
  id         String   @id @default(cuid())
  practiceId String
  practice   Practice @relation(fields: [practiceId], references: [id])

  // Claim details
  claimNumber     String   @unique
  patientName     String
  patientId       String?
  insuranceCarrier String
  policyNumber    String?
  serviceDate     DateTime
  submissionDate  DateTime @default(now())

  // Financial details
  chargedAmount   Decimal
  allowedAmount   Decimal?
  paidAmount      Decimal?
  patientPortion  Decimal?

  // Status tracking
  status          ClaimStatus @default(SUBMITTED)
  denialReason    String?
  lastStatusUpdate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("insurance_claims")
}

enum ClaimStatus {
  SUBMITTED
  PENDING
  APPROVED
  PAID
  DENIED
  APPEALED
  WRITTEN_OFF
}

// Activity logging for audit trails
model Activity {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  practiceId String?
  practice   Practice? @relation(fields: [practiceId], references: [id])

  // Activity details
  action     String   // "created_call", "updated_ticket", etc.
  entityType String   // "call", "ticket", "practice", etc.
  entityId   String?  // ID of the entity being acted upon
  details    Json?    // Additional activity details
  ipAddress  String?
  userAgent  String?

  createdAt DateTime @default(now())

  @@map("activities")
}

// System configuration
model Settings {
  id    String @id @default("system")
  key   String @unique
  value Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}